1.Nginx的概念与特点:
    Nginx("engine x")是一个高性能的HTTP和反向代理服务器。
    特点:占用内存少，并发能力强。
注意:Nginx可以作为静态网页的web服务器，同时还支持CGI协议的动态语言。
    比如:perl,php等，但是不支持java。
    java程序只能通过与tomcat配合完成。
2.反向代理:
    代理服务器。负载均衡。
3.安装nginx:
    1)需要的素材:
        pcre-8.37.tar.gz
        openssl-1.0.1.tar.gz
        zlib-1.2.8.tar.gz
        nginx-1.11.1.tar.gz
    把以上的文件复制到Linux /opt文件夹下
    2)安装pcre:
        解压缩pcre-xx.tar.gz包
        进入解压缩目录，执行./configure
        如果提示，需要提前安装gcc++
        进入安装光盘目录的软件包(/media/CentOSXX/Package)执行
        rpm -ivh libstdc++-devel-4.4.7-17.el6.x86_64.rpm
        rpm -ivh gcc-c++-4.4.7-17.el6.x86_64.rpm
        这儿可能会报了一个错解决办法:
            http://www.youhutong.com/index.php/article/index/92.html
        ./configure完成后，回到pcre目录下执行make，再执行make install
    3)安装openssl:
        解压缩openssl-xx.tar.gz包。
        进入解压缩目录，执行./config
        make & make install
    4)安装zlib:
        解压缩zlib-xx.tar.gz包。
        进入解压缩目录，执行./configure。
        make & make install
    5)安装nginx:
        解压缩nginx-xx.tar.gz包。
        进入解压缩目录，执行./configure。
        make & make install
3.启动:
    1)启动命令:
        在/usr/local/nginx/sbin目录下执行
        ./nginx
    2)关闭命令:
        在/usr/local/nginx/sbin目录下执行
        ./nginx -s stop
    3)重新加载命令:
        在/usr/local/nginx/sbin目录下执行
        ./nginx -s reload
    注意:
        nginx无法启动: libpcre.so.1/libpcre.so.0: cannot open shared object file
    解决办法:
        64位系统则:
            ln -s /usr/local/lib/libpcre.so.1 /lib64
        32位系统则：
            ln -s /usr/local/lib/libpcre.so.1 /lib
    4)设置nginx为自启动服务:
        修改linux 启动脚本/etc/rc.d/rc
        加入:
            /usr/local/nginx/sbin/nginx
    5)进入首页:
        输入ip地址，默认的是80端口，所以不需要输入端口号。
        注意:
            关闭防火墙，要不开放80端口访问。
4.结合redis配置负载均衡:
    1)首先准备两个同时启动的Tomcat
    2)拷贝对应jar包到tomcat下lib包中:
        注意:这儿Tomcat7.0下尝试成功，Tomcat8.5下没有成功。
        commons-pool2-2.0.jar
        jedis-2.5.2
        tomcat-redis-session-manager1.2.jar
    3)修改Tomcat的下content.xml(加到最下方)
        把session的值交给Redis统一管理:
        <Valve className="com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve" />
          <Manager className="com.orangefunction.tomcat.redissessions.RedisSessionManager"
           host="127.0.0.1"
           port="6379"
           database="0"
           maxInactiveInterval="60" />
    4)启动redis
    5)配置nginx.conf
        http {
        ......
             upstream myserver{
                   #ip_hash;
                   server 115.28.52.63:8080 weight=1;
                   server 115.28.52.63:8180 weight=1;
               }
        .....
              server{
                  location / {
                                 .........
         	         proxy_pass http://myserver;
                                 proxy_connect_timeout 10;
                                 proxy_redirect default;
                   }
                          .........
                }
        }
5.nginx的原理与配置:
    1)master-workers的机制的好处:
        首先，对于每个worker进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。
        其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master进程则很快启动新的worker进程。
        当然，worker进程的异常退出，肯定是程序有bug了，异常退出，会导致当前worker上的所有请求失败，不过不会影响到所有请求，所以降低了风险。
    2)需要设置多少个worker:
        Nginx 同redis类似都采用了io多路复用机制，每个worker都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求，
        即使是千上万个请求也不在话下。每个worker的线程可以把一个cpu的性能发挥到极致。
        所以worker数和服务器的cpu数相等是最为适宜的。设少了会浪费cpu，设多了会造成cpu频繁切换上下文带来的损耗。
    3)连接数worker_connection:
        这个值是表示每个worker进程所能建立连接的最大值，所以，一个nginx能建立的最大连接数，应该是worker_connections * worker_processes。
        当然，这里说的是最大连接数，对于HTTP请求本地资源来说，能够支持的最大并发数量是worker_connections * worker_processes，
        如果是支持http1.1的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数是： worker_connections * worker_processes /2，
        而如果是HTTP作为反向代理来说，最大并发数量应该是worker_connections * worker_processes/4。
        因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。





